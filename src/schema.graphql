type Query {
    users(query: String): [User!]!
        me: User!
        posts(query: String): [Post!]!
        comments: [Comment!]!
}

type Mutation {
    createUser(data: CreateUserInput): User!
        deleteUser(id: ID!): User!
        updateUser(id: ID!, data: UpdateUserInput): User!
        deletePost(id: ID!): Post!
        updatePost(id: ID!, data: UpdatePostInput): Post!
        deleteComment(id: ID!): Comment!
        updateComment(id: ID!, data: UpdateCommentInput): Comment!
        createPost(data: CreatePostInput): Post!
        createComment(data: CreateCommentInput): Comment!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

input UpdateUserInput {
    name: String
    email: String
    age: Int
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input UpdateCommentInput {
    text: String
}

input CreateUserInput {
    name: String!,
        email: String!,
        age: Int
}

input CreatePostInput {
    title: String!,
        body: String!,
        published: Boolean!,
        author: ID!
}

input CreateCommentInput {
    text: String!,
        author: ID!,
        post: ID!
}

type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments: [Comment!]
}

type Post {
    id: ID!
        title: String!
        body: String!
        published: Int!
        author: User!
        comments: [Comment!]
}

type Comment {
    id: ID!
        text: String!
        author: User!
        post: Post!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}